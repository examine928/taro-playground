"use strict";(self.webpackJsonp=self.webpackJsonp||[]).push([[9151],{"9151":function(A){A.exports=JSON.parse('{"version":3,"sources":["src/components/image/style/index.scss?tag=taro-image-core","src/components/image/image.tsx"],"names":["indexCss","import","Image","prototype","componentDidLoad","_this","this","lazyLoad","lazyImg","IntersectionObserver","entries","length","isIntersecting","unobserve","imgRef","src","rootMargin","observe","imageOnLoad","_a","width","height","naturalWidth","naturalHeight","onLoad","emit","aspectFillMode","imageOnError","e","onError","render","_b","_c","mode","_d","_e","nativeProps","cls","classNames","taro-img__widthfix","imgCls","concat","toLowerCase","replace","h","Host","class","Object","assign","ref","img","bind"],"mappings":"qIAAA,IAAMA,SAAW,o8BCGjBC,OAAO,2CAsBMC,MAAK,+JAEK,4BACF,uBACG,uBAEI,QAY1BA,EAAAC,UAAAC,iBAAA,WAAA,IAAAC,EAAAC,KACE,IAAKA,KAAKC,SAAU,OAEpB,IAAMC,EAAU,IAAIC,sBAAqB,SAAAC,GAEvC,GAAIA,EAAQA,EAAQC,OAAS,GAAGC,eAAgB,CAC9CJ,EAAQK,UAAUR,EAAKS,QACvBT,EAAKS,OAAOC,IAAMV,EAAKU,OAExB,CACDC,WAAY,cAGdR,EAAQS,QAAQX,KAAKQ,SAGvBZ,EAAAC,UAAAe,YAAA,WACQ,IAAAC,EAKFb,KAAKQ,OAJPM,EAAKD,EAAAC,MACLC,EAAMF,EAAAE,OACNC,EAAYH,EAAAG,aACZC,EAAaJ,EAAAI,cAGfjB,KAAKkB,OAAOC,KAAK,CACfL,MAAKA,EACLC,OAAMA,IAGRf,KAAKoB,eAAiBJ,EAAeC,EAAgB,QAAU,UAGjErB,EAAAC,UAAAwB,aAAA,SAAcC,GACZtB,KAAKuB,QAAQJ,KAAKG,IAGpB1B,EAAAC,UAAA2B,OAAA,iBAAA,IAAAzB,EAAAC,KACQ,IAAAyB,EAQFzB,KAPFS,EAAGgB,EAAAhB,IACHiB,EAAAD,EAAAE,KAAAA,EAAID,SAAA,EAAG,cAAaA,EACpBE,EAAAH,EAAAxB,SAAAA,EAAQ2B,SAAA,EAAG,MAAKA,EAChBC,EAAAJ,EAAAL,eAAAA,EAAcS,SAAA,EAAG,QAAOA,EACxBjB,EAAWa,EAAAb,YACXS,EAAYI,EAAAJ,aACZS,EAAWL,EAAAK,YAGb,IAAMC,EAAMC,WAAW,CACrBC,qBAAsBN,IAAS,aAEjC,IAAMO,EAASF,WACb,kBAAAG,OAAkBR,EAAKS,cAAcC,QAAQ,MAAO,MAAKxB,EAAA,GAEvDA,EAAC,8BAAAsB,OAA8Bf,IAAmBO,IAAS,iBAI/D,OACEW,EAACC,KAAI,CAACC,MAAOT,GACV9B,EACCqC,EAAA,MAAAG,OAAAC,OAAA,CACEC,IAAK,SAAAC,GAAG,OAAK7C,EAAKS,OAASoC,GAC3BJ,MAAON,EACPhB,OAAQN,EAAYiC,KAAK7C,MACzBuB,QAASF,EAAawB,KAAK7C,OACvB8B,IAGNQ,EAAA,MAAAG,OAAAC,OAAA,CACEC,IAAK,SAAAC,GAAG,OAAK7C,EAAKS,OAASoC,GAC3BJ,MAAON,EACPzB,IAAKA,EACLS,OAAQN,EAAYiC,KAAK7C,MACzBuB,QAASF,EAAawB,KAAK7C,OACvB8B,eA5FE","sourcesContent":["img[src=\\"\\"] {\\n  opacity: 0;\\n}\\n\\ntaro-image-core {\\n  display: inline-block;\\n  overflow: hidden;\\n  position: relative;\\n  width: auto;\\n  height: auto;\\n  font-size: 0;\\n}\\n\\n.taro-img {\\n  &.taro-img__widthfix {\\n    height: 100%;\\n  }\\n\\n  &__mode {\\n    &-scaletofill {\\n      width: 100%;\\n      height: 100%;\\n    }\\n\\n    &-aspectfit {\\n      max-width: 100%;\\n      max-height: 100%;\\n    }\\n\\n    &-aspectfill {\\n      position: absolute;\\n      left: 50%;\\n      top: 50%;\\n      transform: translate(-50%, -50%);\\n\\n      &--width {\\n        min-width: 100%;\\n        height: 100%;\\n      }\\n\\n      &--height {\\n        width: 100%;\\n        min-height: 100%;\\n      }\\n    }\\n\\n    &-widthfix {\\n      width: 100%;\\n    }\\n\\n    &-heightfix {\\n      height: 100%;\\n    }\\n\\n    &-top {\\n      width: 100%;\\n    }\\n\\n    &-bottom {\\n      position: absolute;\\n      bottom: 0;\\n      width: 100%;\\n    }\\n\\n    &-left {\\n      height: 100%;\\n    }\\n\\n    &-right {\\n      position: absolute;\\n      right: 0;\\n      height: 100%;\\n    }\\n\\n    // &-topleft {\\n    // }\\n\\n    &-topright {\\n      position: absolute;\\n      right: 0;\\n    }\\n\\n    &-bottomleft {\\n      position: absolute;\\n      bottom: 0;\\n    }\\n\\n    &-bottomright {\\n      position: absolute;\\n      right: 0;\\n      bottom: 0;\\n    }\\n  }\\n}\\n","import { Component, Prop, h, ComponentInterface, Host, State, Event, EventEmitter } from \'@stencil/core\'\\nimport classNames from \'classnames\'\\n\\nimport(\'intersection-observer\')\\n\\nexport type Mode =\\n  \'scaleToFill\'\\n  | \'aspectFit\'\\n  | \'aspectFill\'\\n  | \'widthFix\'\\n  | \'heightFix\'\\n  | \'top\'\\n  | \'bottom\'\\n  | \'center\'\\n  | \'left\'\\n  | \'right\'\\n  | \'top left\'\\n  | \'top right\'\\n  | \'bottom left\'\\n  | \'bottom right\'\\n\\n@Component({\\n  tag: \'taro-image-core\',\\n  styleUrl: \'./style/index.scss\'\\n})\\nexport class Image implements ComponentInterface {\\n  @Prop() src: string\\n  @Prop() mode: Mode = \'scaleToFill\'\\n  @Prop() lazyLoad = false\\n  @Prop() nativeProps = {}\\n\\n  @State() aspectFillMode = \'width\'\\n\\n  @Event({\\n    eventName: \'load\'\\n  }) onLoad: EventEmitter\\n\\n  @Event({\\n    eventName: \'error\'\\n  }) onError: EventEmitter\\n\\n  private imgRef: HTMLImageElement\\n\\n  componentDidLoad () {\\n    if (!this.lazyLoad) return\\n\\n    const lazyImg = new IntersectionObserver(entries => {\\n      // 异步 api 关系\\n      if (entries[entries.length - 1].isIntersecting) {\\n        lazyImg.unobserve(this.imgRef)\\n        this.imgRef.src = this.src\\n      }\\n    }, {\\n      rootMargin: \'300px 0px\'\\n    })\\n\\n    lazyImg.observe(this.imgRef)\\n  }\\n\\n  imageOnLoad () {\\n    const {\\n      width,\\n      height,\\n      naturalWidth,\\n      naturalHeight\\n    } = this.imgRef\\n\\n    this.onLoad.emit({\\n      width,\\n      height\\n    })\\n\\n    this.aspectFillMode = naturalWidth > naturalHeight ? \'width\' : \'height\'\\n  }\\n\\n  imageOnError (e: Event) {\\n    this.onError.emit(e)\\n  }\\n\\n  render () {\\n    const {\\n      src,\\n      mode = \'scaleToFill\',\\n      lazyLoad = false,\\n      aspectFillMode = \'width\',\\n      imageOnLoad,\\n      imageOnError,\\n      nativeProps\\n    } = this\\n\\n    const cls = classNames({\\n      \'taro-img__widthfix\': mode === \'widthFix\'\\n    })\\n    const imgCls = classNames(\\n      `taro-img__mode-${mode.toLowerCase().replace(/\\\\s/g, \'\')}`,\\n      {\\n        [`taro-img__mode-aspectfill--${aspectFillMode}`]: mode === \'aspectFill\'\\n      }\\n    )\\n\\n    return (\\n      <Host class={cls}>\\n        {lazyLoad ? (\\n          <img\\n            ref={img => (this.imgRef = img!)}\\n            class={imgCls}\\n            onLoad={imageOnLoad.bind(this)}\\n            onError={imageOnError.bind(this)}\\n            {...nativeProps}\\n          />\\n        ) : (\\n          <img\\n            ref={img => (this.imgRef = img!)}\\n            class={imgCls}\\n            src={src}\\n            onLoad={imageOnLoad.bind(this)}\\n            onError={imageOnError.bind(this)}\\n            {...nativeProps}\\n          />\\n        )}\\n      </Host>\\n    )\\n  }\\n}\\n"]}')}}]);