"use strict";(self.webpackJsonp=self.webpackJsonp||[]).push([[6686],{"6686":function(A){A.exports=JSON.parse('{"version":3,"sources":["src/components/form/form.tsx"],"names":["Form","hostRef","this","value","prototype","onButtonSubmit","e","stopPropagation","getFormValue","onSubmit","emit","onButtonReset","form","reset","componentDidLoad","_this","Object","defineProperty","el","get","configurable","componentDidRender","originalAppendChild","appendChild","originalInsertBefore","insertBefore","originalReplaceChild","replaceChild","originalRemoveChild","removeChild","newChild","refChild","oldChild","elements","tagElements","getElementsByTagName","j","length","push","formItem","hash","forEach","item","name","className","indexOf","checked","type","textareaElements","textareaEleArr","i","v","render","h","ref","dom"],"mappings":"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","sourcesContent":["import { Component, h, ComponentInterface, Event, EventEmitter, Element, Listen } from \'@stencil/core\'\\n\\n@Component({\\n  tag: \'taro-form-core\'\\n})\\nexport class Form implements ComponentInterface {\\n  private form: HTMLFormElement\\n  private value: {[propName: string]: any} = {}\\n  private originalAppendChild: <T extends Node>(newChild: T) => T\\n  private originalInsertBefore: <T extends Node>(newChild: T, refChild: Node | null) => T\\n  private originalReplaceChild: <T extends Node>(newChild: Node, oldChild: T) => T\\n  private originalRemoveChild: <T extends Node>(oldChild: T) => T\\n\\n  @Element() el: HTMLElement\\n\\n  @Event({\\n    eventName: \'submit\'\\n  }) onSubmit: EventEmitter\\n\\n  @Listen(\'tarobuttonsubmit\')\\n  onButtonSubmit (e: Event) {\\n    e.stopPropagation()\\n\\n    this.value = this.getFormValue()\\n\\n    this.onSubmit.emit({\\n      value: this.value\\n    })\\n  }\\n\\n  @Listen(\'tarobuttonreset\')\\n  onButtonReset (e: Event) {\\n    e.stopPropagation()\\n    this.form.reset()\\n  }\\n\\n  componentDidLoad () {\\n    this.value = this.getFormValue()\\n\\n    Object.defineProperty(this.el, \'value\', {\\n      get: () => this.value,\\n      configurable: true\\n    })\\n  }\\n\\n  componentDidRender () {\\n    if (!this.originalAppendChild) {\\n      this.originalAppendChild = this.el.appendChild\\n      this.originalInsertBefore = this.el.insertBefore\\n      this.originalReplaceChild = this.el.replaceChild\\n      this.originalRemoveChild = this.el.removeChild\\n    }\\n    if (!this.form) {\\n      this.el.appendChild = this.originalAppendChild\\n      this.el.insertBefore = this.originalInsertBefore\\n      this.el.replaceChild = this.originalReplaceChild\\n      this.el.removeChild = this.originalRemoveChild\\n      return\\n    }\\n    this.el.appendChild = <T extends Node>(newChild: T): T => {\\n      return this.form.appendChild(newChild)\\n    }\\n    this.el.insertBefore = <T extends Node>(newChild: T, refChild: Node | null): T => {\\n      return this.form.insertBefore(newChild, refChild)\\n    }\\n    this.el.replaceChild = <T extends Node>(newChild: Node, oldChild: T): T => {\\n      return this.form.replaceChild(newChild, oldChild)\\n    }\\n    this.el.removeChild = <T extends Node>(oldChild: T): T => {\\n      return this.form.removeChild(oldChild)\\n    }\\n  }\\n\\n  getFormValue () {\\n    const el = this.el\\n    const elements: HTMLInputElement[] = []\\n    const tagElements = el.getElementsByTagName(\'input\')\\n    for (let j = 0; j < tagElements.length; j++) {\\n      elements.push(tagElements[j])\\n    }\\n    const formItem = {}\\n    const hash = {}\\n    elements.forEach(item => {\\n      if (typeof item.name !== \'string\') return\\n      if (item.className.indexOf(\'weui-switch\') !== -1) {\\n        formItem[item.name] = item.checked\\n        return\\n      }\\n      if (item.type === \'radio\') {\\n        if (item.checked) {\\n          hash[item.name] = true\\n          formItem[item.name] = item.value\\n        } else {\\n          if (!hash[item.name]) {\\n            formItem[item.name] = \'\'\\n          }\\n        }\\n        return\\n      }\\n\\n      if (item.type === \'checkbox\') {\\n        if (item.checked) {\\n          if (hash[item.name]) {\\n            formItem[item.name].push(item.value)\\n          } else {\\n            hash[item.name] = true\\n            formItem[item.name] = [item.value]\\n          }\\n        } else {\\n          if (!hash[item.name]) {\\n            formItem[item.name] = []\\n          }\\n        }\\n        return\\n      }\\n      formItem[item.name] = item.value\\n    })\\n\\n    const textareaElements = el.getElementsByTagName(\'textarea\')\\n    const textareaEleArr: HTMLTextAreaElement[] = []\\n\\n    for (let i = 0; i < textareaElements.length; i++) {\\n      textareaEleArr.push(textareaElements[i])\\n    }\\n    textareaEleArr.forEach(v => {\\n      if (typeof v.name !== \'string\') return\\n      formItem[v.name] = v.value\\n    })\\n    return formItem\\n  }\\n\\n  render () {\\n    return (\\n      <form\\n        ref={dom => {\\n          this.form = dom!\\n        }}\\n      >\\n        <slot />\\n      </form>\\n    )\\n  }\\n}\\n"]}')}}]);